// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class XelisNativeImpl implements XelisNative {
  final XelisNativePlatform _platform;
  factory XelisNativeImpl(ExternalLibrary dylib) =>
      XelisNativeImpl.raw(XelisNativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory XelisNativeImpl.wasm(FutureOr<WasmModule> module) =>
      XelisNativeImpl(module as ExternalLibrary);
  XelisNativeImpl.raw(this._platform);
  Future<XelisKeyPair> createKeyPair({String? seed, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(seed);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_key_pair(port_, arg0),
      parseSuccessData: (d) => _wire2api_xelis_key_pair(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateKeyPairConstMeta,
      argValues: [seed],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_key_pair",
        argNames: ["seed"],
      );

  Future<void> setNetworkToMainnet({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_network_to_mainnet(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetNetworkToMainnetConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetNetworkToMainnetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_network_to_mainnet",
        argNames: [],
      );

  Future<void> setNetworkToTestnet({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_network_to_testnet(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetNetworkToTestnetConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetNetworkToTestnetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_network_to_testnet",
        argNames: [],
      );

  Future<void> setNetworkToDev({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_network_to_dev(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetNetworkToDevConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetNetworkToDevConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_network_to_dev",
        argNames: [],
      );

  Future<String> getAddressMethodXelisKeyPair(
      {required XelisKeyPair that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_xelis_key_pair(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_address__method__XelisKeyPair(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetAddressMethodXelisKeyPairConstMeta,
      argValues: [that],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAddressMethodXelisKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_address__method__XelisKeyPair",
        argNames: ["that"],
      );

  Future<String> getSeedMethodXelisKeyPair(
      {required XelisKeyPair that, required int languageIndex, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_xelis_key_pair(that);
    var arg1 = api2wire_usize(languageIndex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_seed__method__XelisKeyPair(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetSeedMethodXelisKeyPairConstMeta,
      argValues: [that, languageIndex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetSeedMethodXelisKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_seed__method__XelisKeyPair",
        argNames: ["that", "languageIndex"],
      );

  Future<Signature> signMethodXelisKeyPair(
      {required XelisKeyPair that, required String data, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_xelis_key_pair(that);
    var arg1 = _platform.api2wire_String(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_sign__method__XelisKeyPair(port_, arg0, arg1),
      parseSuccessData: _wire2api_Signature,
      parseErrorData: null,
      constMeta: kSignMethodXelisKeyPairConstMeta,
      argValues: [that, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMethodXelisKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__method__XelisKeyPair",
        argNames: ["that", "data"],
      );

  Future<bool> verifySignatureMethodXelisKeyPair(
      {required XelisKeyPair that,
      required String hash,
      required Signature signature,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_xelis_key_pair(that);
    var arg1 = _platform.api2wire_String(hash);
    var arg2 = _platform.api2wire_Signature(signature);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_verify_signature__method__XelisKeyPair(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kVerifySignatureMethodXelisKeyPairConstMeta,
      argValues: [that, hash, signature],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kVerifySignatureMethodXelisKeyPairConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "verify_signature__method__XelisKeyPair",
            argNames: ["that", "hash", "signature"],
          );

  Future<int> getEstimatedFeesMethodXelisKeyPair(
      {required XelisKeyPair that,
      required String address,
      required int amount,
      required String asset,
      required int nonce,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_xelis_key_pair(that);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_u64(amount);
    var arg3 = _platform.api2wire_String(asset);
    var arg4 = _platform.api2wire_u64(nonce);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_get_estimated_fees__method__XelisKeyPair(
              port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_u64,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetEstimatedFeesMethodXelisKeyPairConstMeta,
      argValues: [that, address, amount, asset, nonce],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kGetEstimatedFeesMethodXelisKeyPairConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "get_estimated_fees__method__XelisKeyPair",
            argNames: ["that", "address", "amount", "asset", "nonce"],
          );

  Future<String> createTxMethodXelisKeyPair(
      {required XelisKeyPair that,
      required String address,
      required int amount,
      required String asset,
      required int balance,
      required int nonce,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_xelis_key_pair(that);
    var arg1 = _platform.api2wire_String(address);
    var arg2 = _platform.api2wire_u64(amount);
    var arg3 = _platform.api2wire_String(asset);
    var arg4 = _platform.api2wire_u64(balance);
    var arg5 = _platform.api2wire_u64(nonce);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_tx__method__XelisKeyPair(
          port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreateTxMethodXelisKeyPairConstMeta,
      argValues: [that, address, amount, asset, balance, nonce],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateTxMethodXelisKeyPairConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_tx__method__XelisKeyPair",
        argNames: ["that", "address", "amount", "asset", "balance", "nonce"],
      );

  DropFnType get dropOpaqueKeyPair => _platform.inner.drop_opaque_KeyPair;
  ShareFnType get shareOpaqueKeyPair => _platform.inner.share_opaque_KeyPair;
  OpaqueTypeFinalizer get KeyPairFinalizer => _platform.KeyPairFinalizer;

  DropFnType get dropOpaqueSignature => _platform.inner.drop_opaque_Signature;
  ShareFnType get shareOpaqueSignature =>
      _platform.inner.share_opaque_Signature;
  OpaqueTypeFinalizer get SignatureFinalizer => _platform.SignatureFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  KeyPair _wire2api_KeyPair(dynamic raw) {
    return KeyPair.fromRaw(raw[0], raw[1], this);
  }

  Signature _wire2api_Signature(dynamic raw) {
    return Signature.fromRaw(raw[0], raw[1], this);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  XelisKeyPair _wire2api_xelis_key_pair(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return XelisKeyPair(
      bridge: this,
      keyPair: _wire2api_KeyPair(arr[0]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

// Section: finalizer

class XelisNativePlatform extends FlutterRustBridgeBase<XelisNativeWire> {
  XelisNativePlatform(ffi.DynamicLibrary dylib) : super(XelisNativeWire(dylib));

// Section: api2wire

  @protected
  wire_KeyPair api2wire_KeyPair(KeyPair raw) {
    final ptr = inner.new_KeyPair();
    _api_fill_to_wire_KeyPair(raw, ptr);
    return ptr;
  }

  @protected
  wire_Signature api2wire_Signature(Signature raw) {
    final ptr = inner.new_Signature();
    _api_fill_to_wire_Signature(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_XelisKeyPair> api2wire_box_autoadd_xelis_key_pair(
      XelisKeyPair raw) {
    final ptr = inner.new_box_autoadd_xelis_key_pair_0();
    _api_fill_to_wire_xelis_key_pair(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _KeyPairFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_KeyPairPtr);
  OpaqueTypeFinalizer get KeyPairFinalizer => _KeyPairFinalizer;
  late final OpaqueTypeFinalizer _SignatureFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_SignaturePtr);
  OpaqueTypeFinalizer get SignatureFinalizer => _SignatureFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_KeyPair(KeyPair apiObj, wire_KeyPair wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_Signature(Signature apiObj, wire_Signature wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_xelis_key_pair(
      XelisKeyPair apiObj, ffi.Pointer<wire_XelisKeyPair> wireObj) {
    _api_fill_to_wire_xelis_key_pair(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_xelis_key_pair(
      XelisKeyPair apiObj, wire_XelisKeyPair wireObj) {
    wireObj.key_pair = api2wire_KeyPair(apiObj.keyPair);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class XelisNativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  XelisNativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  XelisNativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_create_key_pair(
    int port_,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_create_key_pair(
      port_,
      seed,
    );
  }

  late final _wire_create_key_pairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_key_pair');
  late final _wire_create_key_pair = _wire_create_key_pairPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_network_to_mainnet(
    int port_,
  ) {
    return _wire_set_network_to_mainnet(
      port_,
    );
  }

  late final _wire_set_network_to_mainnetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_set_network_to_mainnet');
  late final _wire_set_network_to_mainnet =
      _wire_set_network_to_mainnetPtr.asFunction<void Function(int)>();

  void wire_set_network_to_testnet(
    int port_,
  ) {
    return _wire_set_network_to_testnet(
      port_,
    );
  }

  late final _wire_set_network_to_testnetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_set_network_to_testnet');
  late final _wire_set_network_to_testnet =
      _wire_set_network_to_testnetPtr.asFunction<void Function(int)>();

  void wire_set_network_to_dev(
    int port_,
  ) {
    return _wire_set_network_to_dev(
      port_,
    );
  }

  late final _wire_set_network_to_devPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_set_network_to_dev');
  late final _wire_set_network_to_dev =
      _wire_set_network_to_devPtr.asFunction<void Function(int)>();

  void wire_get_address__method__XelisKeyPair(
    int port_,
    ffi.Pointer<wire_XelisKeyPair> that,
  ) {
    return _wire_get_address__method__XelisKeyPair(
      port_,
      that,
    );
  }

  late final _wire_get_address__method__XelisKeyPairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_XelisKeyPair>)>>(
      'wire_get_address__method__XelisKeyPair');
  late final _wire_get_address__method__XelisKeyPair =
      _wire_get_address__method__XelisKeyPairPtr
          .asFunction<void Function(int, ffi.Pointer<wire_XelisKeyPair>)>();

  void wire_get_seed__method__XelisKeyPair(
    int port_,
    ffi.Pointer<wire_XelisKeyPair> that,
    int language_index,
  ) {
    return _wire_get_seed__method__XelisKeyPair(
      port_,
      that,
      language_index,
    );
  }

  late final _wire_get_seed__method__XelisKeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_XelisKeyPair>,
              ffi.UintPtr)>>('wire_get_seed__method__XelisKeyPair');
  late final _wire_get_seed__method__XelisKeyPair =
      _wire_get_seed__method__XelisKeyPairPtr.asFunction<
          void Function(int, ffi.Pointer<wire_XelisKeyPair>, int)>();

  void wire_sign__method__XelisKeyPair(
    int port_,
    ffi.Pointer<wire_XelisKeyPair> that,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_sign__method__XelisKeyPair(
      port_,
      that,
      data,
    );
  }

  late final _wire_sign__method__XelisKeyPairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_XelisKeyPair>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_sign__method__XelisKeyPair');
  late final _wire_sign__method__XelisKeyPair =
      _wire_sign__method__XelisKeyPairPtr.asFunction<
          void Function(int, ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_verify_signature__method__XelisKeyPair(
    int port_,
    ffi.Pointer<wire_XelisKeyPair> that,
    ffi.Pointer<wire_uint_8_list> hash,
    wire_Signature signature,
  ) {
    return _wire_verify_signature__method__XelisKeyPair(
      port_,
      that,
      hash,
      signature,
    );
  }

  late final _wire_verify_signature__method__XelisKeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>,
              wire_Signature)>>('wire_verify_signature__method__XelisKeyPair');
  late final _wire_verify_signature__method__XelisKeyPair =
      _wire_verify_signature__method__XelisKeyPairPtr.asFunction<
          void Function(int, ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>, wire_Signature)>();

  void wire_get_estimated_fees__method__XelisKeyPair(
    int port_,
    ffi.Pointer<wire_XelisKeyPair> that,
    ffi.Pointer<wire_uint_8_list> address,
    int amount,
    ffi.Pointer<wire_uint_8_list> asset,
    int nonce,
  ) {
    return _wire_get_estimated_fees__method__XelisKeyPair(
      port_,
      that,
      address,
      amount,
      asset,
      nonce,
    );
  }

  late final _wire_get_estimated_fees__method__XelisKeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64)>>('wire_get_estimated_fees__method__XelisKeyPair');
  late final _wire_get_estimated_fees__method__XelisKeyPair =
      _wire_get_estimated_fees__method__XelisKeyPairPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              int)>();

  void wire_create_tx__method__XelisKeyPair(
    int port_,
    ffi.Pointer<wire_XelisKeyPair> that,
    ffi.Pointer<wire_uint_8_list> address,
    int amount,
    ffi.Pointer<wire_uint_8_list> asset,
    int balance,
    int nonce,
  ) {
    return _wire_create_tx__method__XelisKeyPair(
      port_,
      that,
      address,
      amount,
      asset,
      balance,
      nonce,
    );
  }

  late final _wire_create_tx__method__XelisKeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint64,
              ffi.Uint64)>>('wire_create_tx__method__XelisKeyPair');
  late final _wire_create_tx__method__XelisKeyPair =
      _wire_create_tx__method__XelisKeyPairPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_XelisKeyPair>,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              int,
              int)>();

  wire_KeyPair new_KeyPair() {
    return _new_KeyPair();
  }

  late final _new_KeyPairPtr =
      _lookup<ffi.NativeFunction<wire_KeyPair Function()>>('new_KeyPair');
  late final _new_KeyPair =
      _new_KeyPairPtr.asFunction<wire_KeyPair Function()>();

  wire_Signature new_Signature() {
    return _new_Signature();
  }

  late final _new_SignaturePtr =
      _lookup<ffi.NativeFunction<wire_Signature Function()>>('new_Signature');
  late final _new_Signature =
      _new_SignaturePtr.asFunction<wire_Signature Function()>();

  ffi.Pointer<wire_XelisKeyPair> new_box_autoadd_xelis_key_pair_0() {
    return _new_box_autoadd_xelis_key_pair_0();
  }

  late final _new_box_autoadd_xelis_key_pair_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_XelisKeyPair> Function()>>(
          'new_box_autoadd_xelis_key_pair_0');
  late final _new_box_autoadd_xelis_key_pair_0 =
      _new_box_autoadd_xelis_key_pair_0Ptr
          .asFunction<ffi.Pointer<wire_XelisKeyPair> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_KeyPair(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_KeyPair(
      ptr,
    );
  }

  late final _drop_opaque_KeyPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_KeyPair');
  late final _drop_opaque_KeyPair = _drop_opaque_KeyPairPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_KeyPair(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_KeyPair(
      ptr,
    );
  }

  late final _share_opaque_KeyPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_KeyPair');
  late final _share_opaque_KeyPair = _share_opaque_KeyPairPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_Signature(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Signature(
      ptr,
    );
  }

  late final _drop_opaque_SignaturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_Signature');
  late final _drop_opaque_Signature = _drop_opaque_SignaturePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Signature(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Signature(
      ptr,
    );
  }

  late final _share_opaque_SignaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_Signature');
  late final _share_opaque_Signature = _share_opaque_SignaturePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_KeyPair extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_XelisKeyPair extends ffi.Struct {
  external wire_KeyPair key_pair;
}

final class wire_Signature extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
