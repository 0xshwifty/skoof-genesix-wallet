// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'api/keypair.dart';
import 'api/logger.dart';
import 'api/network.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Stream<LogEntry> createLogStream({dynamic hint});

  Future<void> setUpRustLogger({dynamic hint});

  Future<void> startTokioRuntimeForRust({dynamic hint});

  Future<String> xelisKeyPairCreateTx(
      {required XelisKeyPair that,
      required String address,
      required int amount,
      required String asset,
      required int balance,
      required int nonce,
      dynamic hint});

  Future<String> xelisKeyPairGetAddress(
      {required XelisKeyPair that, dynamic hint});

  Future<int> xelisKeyPairGetEstimatedFees(
      {required XelisKeyPair that,
      required String address,
      required int amount,
      required String asset,
      required int nonce,
      dynamic hint});

  Future<String> xelisKeyPairGetSeed(
      {required XelisKeyPair that, required int languageIndex, dynamic hint});

  Future<XelisKeyPair> createKeyPair({String? seed, dynamic hint});

  Stream<LogEntry> sendToDartLoggerSetStreamSink({dynamic hint});

  Future<void> initLogger({dynamic hint});

  Future<void> setNetworkToDev({dynamic hint});

  Future<void> setNetworkToMainnet({dynamic hint});

  Future<void> setNetworkToTestnet({dynamic hint});

  Future<String> xelisWalletGetAddressStr(
      {required XelisWallet that, dynamic hint});

  Future<int> xelisWalletGetNonce({required XelisWallet that, dynamic hint});

  Future<String> xelisWalletGetSeed(
      {required XelisWallet that, required int languageIndex, dynamic hint});

  Future<bool> xelisWalletIsOnline({required XelisWallet that, dynamic hint});

  Future<void> xelisWalletSetOfflineMode(
      {required XelisWallet that, dynamic hint});

  Future<void> xelisWalletSetOnlineMode(
      {required XelisWallet that, required String daemonAddress, dynamic hint});

  Future<XelisWallet> createXelisWallet(
      {required String name,
      required String password,
      String? seed,
      dynamic hint});

  Future<XelisWallet> openXelisWallet(
      {required String name, required String password, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XelisKeyPair;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XelisKeyPair;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_XelisKeyPairPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XelisWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XelisWallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_XelisWalletPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Stream<LogEntry> createLogStream({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_create_log_stream(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_log_entry,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  @override
  Future<void> setUpRustLogger({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_set_up_rust_logger(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetUpRustLoggerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetUpRustLoggerConstMeta => const TaskConstMeta(
        debugName: "set_up_rust_logger",
        argNames: [],
      );

  @override
  Future<void> startTokioRuntimeForRust({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_start_tokio_runtime_for_rust(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kStartTokioRuntimeForRustConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStartTokioRuntimeForRustConstMeta => const TaskConstMeta(
        debugName: "start_tokio_runtime_for_rust",
        argNames: [],
      );

  @override
  Future<String> xelisKeyPairCreateTx(
      {required XelisKeyPair that,
      required String address,
      required int amount,
      required String asset,
      required int balance,
      required int nonce,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(that);
        var arg1 = cst_encode_String(address);
        var arg2 = cst_encode_u_64(amount);
        var arg3 = cst_encode_String(asset);
        var arg4 = cst_encode_u_64(balance);
        var arg5 = cst_encode_u_64(nonce);
        return wire.wire_XelisKeyPair_create_tx(
            port_, arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisKeyPairCreateTxConstMeta,
      argValues: [that, address, amount, asset, balance, nonce],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisKeyPairCreateTxConstMeta => const TaskConstMeta(
        debugName: "XelisKeyPair_create_tx",
        argNames: ["that", "address", "amount", "asset", "balance", "nonce"],
      );

  @override
  Future<String> xelisKeyPairGetAddress(
      {required XelisKeyPair that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(that);
        return wire.wire_XelisKeyPair_get_address(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisKeyPairGetAddressConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisKeyPairGetAddressConstMeta => const TaskConstMeta(
        debugName: "XelisKeyPair_get_address",
        argNames: ["that"],
      );

  @override
  Future<int> xelisKeyPairGetEstimatedFees(
      {required XelisKeyPair that,
      required String address,
      required int amount,
      required String asset,
      required int nonce,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(that);
        var arg1 = cst_encode_String(address);
        var arg2 = cst_encode_u_64(amount);
        var arg3 = cst_encode_String(asset);
        var arg4 = cst_encode_u_64(nonce);
        return wire.wire_XelisKeyPair_get_estimated_fees(
            port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisKeyPairGetEstimatedFeesConstMeta,
      argValues: [that, address, amount, asset, nonce],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisKeyPairGetEstimatedFeesConstMeta =>
      const TaskConstMeta(
        debugName: "XelisKeyPair_get_estimated_fees",
        argNames: ["that", "address", "amount", "asset", "nonce"],
      );

  @override
  Future<String> xelisKeyPairGetSeed(
      {required XelisKeyPair that, required int languageIndex, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(that);
        var arg1 = cst_encode_usize(languageIndex);
        return wire.wire_XelisKeyPair_get_seed(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisKeyPairGetSeedConstMeta,
      argValues: [that, languageIndex],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisKeyPairGetSeedConstMeta => const TaskConstMeta(
        debugName: "XelisKeyPair_get_seed",
        argNames: ["that", "languageIndex"],
      );

  @override
  Future<XelisKeyPair> createKeyPair({String? seed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_opt_String(seed);
        return wire.wire_create_key_pair(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCreateKeyPairConstMeta,
      argValues: [seed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateKeyPairConstMeta => const TaskConstMeta(
        debugName: "create_key_pair",
        argNames: ["seed"],
      );

  @override
  Stream<LogEntry> sendToDartLoggerSetStreamSink({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_SendToDartLogger_set_stream_sink(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_log_entry,
        decodeErrorData: null,
      ),
      constMeta: kSendToDartLoggerSetStreamSinkConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSendToDartLoggerSetStreamSinkConstMeta =>
      const TaskConstMeta(
        debugName: "SendToDartLogger_set_stream_sink",
        argNames: [],
      );

  @override
  Future<void> initLogger({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_init_logger(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitLoggerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitLoggerConstMeta => const TaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  @override
  Future<void> setNetworkToDev({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_set_network_to_dev(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetNetworkToDevConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetNetworkToDevConstMeta => const TaskConstMeta(
        debugName: "set_network_to_dev",
        argNames: [],
      );

  @override
  Future<void> setNetworkToMainnet({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_set_network_to_mainnet(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetNetworkToMainnetConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetNetworkToMainnetConstMeta => const TaskConstMeta(
        debugName: "set_network_to_mainnet",
        argNames: [],
      );

  @override
  Future<void> setNetworkToTestnet({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_set_network_to_testnet(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetNetworkToTestnetConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetNetworkToTestnetConstMeta => const TaskConstMeta(
        debugName: "set_network_to_testnet",
        argNames: [],
      );

  @override
  Future<String> xelisWalletGetAddressStr(
      {required XelisWallet that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(that);
        return wire.wire_XelisWallet_get_address_str(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisWalletGetAddressStrConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisWalletGetAddressStrConstMeta => const TaskConstMeta(
        debugName: "XelisWallet_get_address_str",
        argNames: ["that"],
      );

  @override
  Future<int> xelisWalletGetNonce({required XelisWallet that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(that);
        return wire.wire_XelisWallet_get_nonce(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kXelisWalletGetNonceConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisWalletGetNonceConstMeta => const TaskConstMeta(
        debugName: "XelisWallet_get_nonce",
        argNames: ["that"],
      );

  @override
  Future<String> xelisWalletGetSeed(
      {required XelisWallet that, required int languageIndex, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(that);
        var arg1 = cst_encode_usize(languageIndex);
        return wire.wire_XelisWallet_get_seed(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisWalletGetSeedConstMeta,
      argValues: [that, languageIndex],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisWalletGetSeedConstMeta => const TaskConstMeta(
        debugName: "XelisWallet_get_seed",
        argNames: ["that", "languageIndex"],
      );

  @override
  Future<bool> xelisWalletIsOnline({required XelisWallet that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(that);
        return wire.wire_XelisWallet_is_online(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kXelisWalletIsOnlineConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisWalletIsOnlineConstMeta => const TaskConstMeta(
        debugName: "XelisWallet_is_online",
        argNames: ["that"],
      );

  @override
  Future<void> xelisWalletSetOfflineMode(
      {required XelisWallet that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(that);
        return wire.wire_XelisWallet_set_offline_mode(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisWalletSetOfflineModeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisWalletSetOfflineModeConstMeta => const TaskConstMeta(
        debugName: "XelisWallet_set_offline_mode",
        argNames: ["that"],
      );

  @override
  Future<void> xelisWalletSetOnlineMode(
      {required XelisWallet that,
      required String daemonAddress,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(that);
        var arg1 = cst_encode_String(daemonAddress);
        return wire.wire_XelisWallet_set_online_mode(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kXelisWalletSetOnlineModeConstMeta,
      argValues: [that, daemonAddress],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kXelisWalletSetOnlineModeConstMeta => const TaskConstMeta(
        debugName: "XelisWallet_set_online_mode",
        argNames: ["that", "daemonAddress"],
      );

  @override
  Future<XelisWallet> createXelisWallet(
      {required String name,
      required String password,
      String? seed,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_String(password);
        var arg2 = cst_encode_opt_String(seed);
        return wire.wire_create_xelis_wallet(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCreateXelisWalletConstMeta,
      argValues: [name, password, seed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateXelisWalletConstMeta => const TaskConstMeta(
        debugName: "create_xelis_wallet",
        argNames: ["name", "password", "seed"],
      );

  @override
  Future<XelisWallet> openXelisWallet(
      {required String name, required String password, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(name);
        var arg1 = cst_encode_String(password);
        return wire.wire_open_xelis_wallet(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kOpenXelisWalletConstMeta,
      argValues: [name, password],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpenXelisWalletConstMeta => const TaskConstMeta(
        debugName: "open_xelis_wallet",
        argNames: ["name", "password"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XelisKeyPair => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XelisKeyPair => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XelisWallet => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XelisWallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    return AnyhowException(raw as String);
  }

  @protected
  XelisKeyPair dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      dynamic raw) {
    return XelisKeyPair.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XelisWallet dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      dynamic raw) {
    return XelisWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XelisKeyPair dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      dynamic raw) {
    return XelisKeyPair.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XelisWallet dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      dynamic raw) {
    return XelisWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XelisKeyPair dco_decode_RustOpaque_stdsyncRwLockXelisKeyPair(dynamic raw) {
    return XelisKeyPair.dcoDecode(raw as List<dynamic>);
  }

  @protected
  XelisWallet dco_decode_RustOpaque_stdsyncRwLockXelisWallet(dynamic raw) {
    return XelisWallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_String(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  XelisKeyPair sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer) {
    return XelisKeyPair.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisWallet sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer) {
    return XelisWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisKeyPair sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer) {
    return XelisKeyPair.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisWallet sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer) {
    return XelisWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisKeyPair sse_decode_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer) {
    return XelisKeyPair.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XelisWallet sse_decode_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer) {
    return XelisWallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_String(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw) {
    // ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, feel free to create an issue');
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_String(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }
}
