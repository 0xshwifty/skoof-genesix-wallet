// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'api/keypair.dart';
import 'api/logger.dart';
import 'api/network.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_XelisKeyPairPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPairPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_XelisWalletPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWalletPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  XelisKeyPair dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      dynamic raw);

  @protected
  XelisWallet dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      dynamic raw);

  @protected
  XelisKeyPair dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      dynamic raw);

  @protected
  XelisWallet dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      dynamic raw);

  @protected
  XelisKeyPair dco_decode_RustOpaque_stdsyncRwLockXelisKeyPair(dynamic raw);

  @protected
  XelisWallet dco_decode_RustOpaque_stdsyncRwLockXelisWallet(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  XelisKeyPair sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer);

  @protected
  XelisWallet sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer);

  @protected
  XelisKeyPair sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer);

  @protected
  XelisWallet sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer);

  @protected
  XelisKeyPair sse_decode_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer);

  @protected
  XelisWallet sse_decode_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(
      AnyhowException raw) {
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  int cst_encode_i_64(int raw) {
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  int cst_encode_u_64(int raw) {
    return raw.toInt();
  }

  @protected
  void cst_api_fill_to_wire_log_entry(
      LogEntry apiObj, wire_cst_log_entry wireObj) {
    wireObj.time_millis = cst_encode_i_64(apiObj.timeMillis);
    wireObj.level = cst_encode_String(apiObj.level);
    wireObj.tag = cst_encode_String(apiObj.tag);
    wireObj.msg = cst_encode_String(apiObj.msg);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('frbgen_xelis_mobile_wallet_dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_create_log_stream');
  late final _wire_create_log_stream =
      _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_set_up_rust_logger(
    int port_,
  ) {
    return _wire_set_up_rust_logger(
      port_,
    );
  }

  late final _wire_set_up_rust_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_set_up_rust_logger');
  late final _wire_set_up_rust_logger =
      _wire_set_up_rust_loggerPtr.asFunction<void Function(int)>();

  void wire_start_tokio_runtime_for_rust(
    int port_,
  ) {
    return _wire_start_tokio_runtime_for_rust(
      port_,
    );
  }

  late final _wire_start_tokio_runtime_for_rustPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_start_tokio_runtime_for_rust');
  late final _wire_start_tokio_runtime_for_rust =
      _wire_start_tokio_runtime_for_rustPtr.asFunction<void Function(int)>();

  void wire_XelisKeyPair_create_tx(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> address,
    int amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> asset,
    int balance,
    int nonce,
  ) {
    return _wire_XelisKeyPair_create_tx(
      port_,
      that,
      address,
      amount,
      asset,
      balance,
      nonce,
    );
  }

  late final _wire_XelisKeyPair_create_txPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Uint64)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisKeyPair_create_tx');
  late final _wire_XelisKeyPair_create_tx =
      _wire_XelisKeyPair_create_txPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              int)>();

  void wire_XelisKeyPair_get_address(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_XelisKeyPair_get_address(
      port_,
      that,
    );
  }

  late final _wire_XelisKeyPair_get_addressPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisKeyPair_get_address');
  late final _wire_XelisKeyPair_get_address = _wire_XelisKeyPair_get_addressPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_XelisKeyPair_get_estimated_fees(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> address,
    int amount,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> asset,
    int nonce,
  ) {
    return _wire_XelisKeyPair_get_estimated_fees(
      port_,
      that,
      address,
      amount,
      asset,
      nonce,
    );
  }

  late final _wire_XelisKeyPair_get_estimated_feesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Uint64)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisKeyPair_get_estimated_fees');
  late final _wire_XelisKeyPair_get_estimated_fees =
      _wire_XelisKeyPair_get_estimated_feesPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              int)>();

  void wire_XelisKeyPair_get_seed(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int language_index,
  ) {
    return _wire_XelisKeyPair_get_seed(
      port_,
      that,
      language_index,
    );
  }

  late final _wire_XelisKeyPair_get_seedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<ffi.Void>, ffi.UintPtr)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisKeyPair_get_seed');
  late final _wire_XelisKeyPair_get_seed = _wire_XelisKeyPair_get_seedPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  void wire_create_key_pair(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> seed,
  ) {
    return _wire_create_key_pair(
      port_,
      seed,
    );
  }

  late final _wire_create_key_pairPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_xelis_mobile_wallet_wire_create_key_pair');
  late final _wire_create_key_pair = _wire_create_key_pairPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_SendToDartLogger_set_stream_sink(
    int port_,
  ) {
    return _wire_SendToDartLogger_set_stream_sink(
      port_,
    );
  }

  late final _wire_SendToDartLogger_set_stream_sinkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_SendToDartLogger_set_stream_sink');
  late final _wire_SendToDartLogger_set_stream_sink =
      _wire_SendToDartLogger_set_stream_sinkPtr
          .asFunction<void Function(int)>();

  void wire_init_logger(
    int port_,
  ) {
    return _wire_init_logger(
      port_,
    );
  }

  late final _wire_init_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_init_logger');
  late final _wire_init_logger =
      _wire_init_loggerPtr.asFunction<void Function(int)>();

  void wire_set_network_to_dev(
    int port_,
  ) {
    return _wire_set_network_to_dev(
      port_,
    );
  }

  late final _wire_set_network_to_devPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_set_network_to_dev');
  late final _wire_set_network_to_dev =
      _wire_set_network_to_devPtr.asFunction<void Function(int)>();

  void wire_set_network_to_mainnet(
    int port_,
  ) {
    return _wire_set_network_to_mainnet(
      port_,
    );
  }

  late final _wire_set_network_to_mainnetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_set_network_to_mainnet');
  late final _wire_set_network_to_mainnet =
      _wire_set_network_to_mainnetPtr.asFunction<void Function(int)>();

  void wire_set_network_to_testnet(
    int port_,
  ) {
    return _wire_set_network_to_testnet(
      port_,
    );
  }

  late final _wire_set_network_to_testnetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_xelis_mobile_wallet_wire_set_network_to_testnet');
  late final _wire_set_network_to_testnet =
      _wire_set_network_to_testnetPtr.asFunction<void Function(int)>();

  void wire_XelisWallet_get_address_str(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_XelisWallet_get_address_str(
      port_,
      that,
    );
  }

  late final _wire_XelisWallet_get_address_strPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisWallet_get_address_str');
  late final _wire_XelisWallet_get_address_str =
      _wire_XelisWallet_get_address_strPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_XelisWallet_get_nonce(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_XelisWallet_get_nonce(
      port_,
      that,
    );
  }

  late final _wire_XelisWallet_get_noncePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisWallet_get_nonce');
  late final _wire_XelisWallet_get_nonce = _wire_XelisWallet_get_noncePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_XelisWallet_get_seed(
    int port_,
    ffi.Pointer<ffi.Void> that,
    int language_index,
  ) {
    return _wire_XelisWallet_get_seed(
      port_,
      that,
      language_index,
    );
  }

  late final _wire_XelisWallet_get_seedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<ffi.Void>, ffi.UintPtr)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisWallet_get_seed');
  late final _wire_XelisWallet_get_seed = _wire_XelisWallet_get_seedPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int)>();

  void wire_XelisWallet_is_online(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_XelisWallet_is_online(
      port_,
      that,
    );
  }

  late final _wire_XelisWallet_is_onlinePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisWallet_is_online');
  late final _wire_XelisWallet_is_online = _wire_XelisWallet_is_onlinePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_XelisWallet_set_offline_mode(
    int port_,
    ffi.Pointer<ffi.Void> that,
  ) {
    return _wire_XelisWallet_set_offline_mode(
      port_,
      that,
    );
  }

  late final _wire_XelisWallet_set_offline_modePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisWallet_set_offline_mode');
  late final _wire_XelisWallet_set_offline_mode =
      _wire_XelisWallet_set_offline_modePtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void wire_XelisWallet_set_online_mode(
    int port_,
    ffi.Pointer<ffi.Void> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> daemon_address,
  ) {
    return _wire_XelisWallet_set_online_mode(
      port_,
      that,
      daemon_address,
    );
  }

  late final _wire_XelisWallet_set_online_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_xelis_mobile_wallet_wire_XelisWallet_set_online_mode');
  late final _wire_XelisWallet_set_online_mode =
      _wire_XelisWallet_set_online_modePtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_create_xelis_wallet(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> name,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> password,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> seed,
  ) {
    return _wire_create_xelis_wallet(
      port_,
      name,
      password,
      seed,
    );
  }

  late final _wire_create_xelis_walletPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_xelis_mobile_wallet_wire_create_xelis_wallet');
  late final _wire_create_xelis_wallet =
      _wire_create_xelis_walletPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_open_xelis_wallet(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> name,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> password,
  ) {
    return _wire_open_xelis_wallet(
      port_,
      name,
      password,
    );
  }

  late final _wire_open_xelis_walletPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_xelis_mobile_wallet_wire_open_xelis_wallet');
  late final _wire_open_xelis_wallet = _wire_open_xelis_walletPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_xelis_mobile_wallet_rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPairPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPairPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_xelis_mobile_wallet_rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPairPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_xelis_mobile_wallet_rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWalletPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWalletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_xelis_mobile_wallet_rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWalletPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)>>(
      'frbgen_xelis_mobile_wallet_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_log_entry extends ffi.Struct {
  @ffi.Int64()
  external int time_millis;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> level;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> tag;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> msg;
}
