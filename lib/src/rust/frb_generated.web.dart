// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/api.dart';
import 'api/keypair.dart';
import 'api/logger.dart';
import 'api/network.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_XelisKeyPairPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_XelisWalletPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  XelisKeyPair dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      dynamic raw);

  @protected
  XelisWallet dco_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      dynamic raw);

  @protected
  XelisKeyPair dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      dynamic raw);

  @protected
  XelisWallet dco_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      dynamic raw);

  @protected
  XelisKeyPair dco_decode_RustOpaque_stdsyncRwLockXelisKeyPair(dynamic raw);

  @protected
  XelisWallet dco_decode_RustOpaque_stdsyncRwLockXelisWallet(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  XelisKeyPair sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer);

  @protected
  XelisWallet sse_decode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer);

  @protected
  XelisKeyPair sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer);

  @protected
  XelisWallet sse_decode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer);

  @protected
  XelisKeyPair sse_decode_RustOpaque_stdsyncRwLockXelisKeyPair(
      SseDeserializer deserializer);

  @protected
  XelisWallet sse_decode_RustOpaque_stdsyncRwLockXelisWallet(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  String cst_encode_AnyhowException(AnyhowException raw) {
    throw UnimplementedError();
  }

  @protected
  String cst_encode_String(String raw) {
    return raw;
  }

  @protected
  Object cst_encode_i_64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_log_entry(LogEntry raw) {
    return [
      cst_encode_i_64(raw.timeMillis),
      cst_encode_String(raw.level),
      cst_encode_String(raw.tag),
      cst_encode_String(raw.msg)
    ];
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  Object cst_encode_u_64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw);

  @protected
  PlatformPointer cst_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw);

  @protected
  PlatformPointer cst_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair raw);

  @protected
  PlatformPointer cst_encode_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Owned_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_Auto_Ref_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockXelisKeyPair(
      XelisKeyPair self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncRwLockXelisWallet(
      XelisWallet self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void dart_fn_deliver_output(int call_id, PlatformGeneralizedUint8ListPtr ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.dart_fn_deliver_output(
          call_id, ptr_, rust_vec_len_, data_len_);

  void wire_create_log_stream(NativePortType port_) =>
      wasmModule.wire_create_log_stream(port_);

  void wire_set_up_rust_logger(NativePortType port_) =>
      wasmModule.wire_set_up_rust_logger(port_);

  void wire_start_tokio_runtime_for_rust(NativePortType port_) =>
      wasmModule.wire_start_tokio_runtime_for_rust(port_);

  void wire_XelisKeyPair_create_tx(
          NativePortType port_,
          Object that,
          String address,
          Object amount,
          String asset,
          Object balance,
          Object nonce) =>
      wasmModule.wire_XelisKeyPair_create_tx(
          port_, that, address, amount, asset, balance, nonce);

  void wire_XelisKeyPair_get_address(NativePortType port_, Object that) =>
      wasmModule.wire_XelisKeyPair_get_address(port_, that);

  void wire_XelisKeyPair_get_estimated_fees(NativePortType port_, Object that,
          String address, Object amount, String asset, Object nonce) =>
      wasmModule.wire_XelisKeyPair_get_estimated_fees(
          port_, that, address, amount, asset, nonce);

  void wire_XelisKeyPair_get_seed(
          NativePortType port_, Object that, int language_index) =>
      wasmModule.wire_XelisKeyPair_get_seed(port_, that, language_index);

  void wire_create_key_pair(NativePortType port_, String? seed) =>
      wasmModule.wire_create_key_pair(port_, seed);

  void wire_SendToDartLogger_set_stream_sink(NativePortType port_) =>
      wasmModule.wire_SendToDartLogger_set_stream_sink(port_);

  void wire_init_logger(NativePortType port_) =>
      wasmModule.wire_init_logger(port_);

  void wire_set_network_to_dev(NativePortType port_) =>
      wasmModule.wire_set_network_to_dev(port_);

  void wire_set_network_to_mainnet(NativePortType port_) =>
      wasmModule.wire_set_network_to_mainnet(port_);

  void wire_set_network_to_testnet(NativePortType port_) =>
      wasmModule.wire_set_network_to_testnet(port_);

  void wire_XelisWallet_get_address_str(NativePortType port_, Object that) =>
      wasmModule.wire_XelisWallet_get_address_str(port_, that);

  void wire_XelisWallet_get_nonce(NativePortType port_, Object that) =>
      wasmModule.wire_XelisWallet_get_nonce(port_, that);

  void wire_XelisWallet_get_seed(
          NativePortType port_, Object that, int language_index) =>
      wasmModule.wire_XelisWallet_get_seed(port_, that, language_index);

  void wire_XelisWallet_is_online(NativePortType port_, Object that) =>
      wasmModule.wire_XelisWallet_is_online(port_, that);

  void wire_XelisWallet_set_offline_mode(NativePortType port_, Object that) =>
      wasmModule.wire_XelisWallet_set_offline_mode(port_, that);

  void wire_XelisWallet_set_online_mode(
          NativePortType port_, Object that, String daemon_address) =>
      wasmModule.wire_XelisWallet_set_online_mode(port_, that, daemon_address);

  void wire_create_xelis_wallet(
          NativePortType port_, String name, String password, String? seed) =>
      wasmModule.wire_create_xelis_wallet(port_, name, password, seed);

  void wire_open_xelis_wallet(
          NativePortType port_, String name, String password) =>
      wasmModule.wire_open_xelis_wallet(port_, name, password);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
              ptr);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void dart_fn_deliver_output(int call_id,
      PlatformGeneralizedUint8ListPtr ptr_, int rust_vec_len_, int data_len_);

  external void wire_create_log_stream(NativePortType port_);

  external void wire_set_up_rust_logger(NativePortType port_);

  external void wire_start_tokio_runtime_for_rust(NativePortType port_);

  external void wire_XelisKeyPair_create_tx(
      NativePortType port_,
      Object that,
      String address,
      Object amount,
      String asset,
      Object balance,
      Object nonce);

  external void wire_XelisKeyPair_get_address(
      NativePortType port_, Object that);

  external void wire_XelisKeyPair_get_estimated_fees(NativePortType port_,
      Object that, String address, Object amount, String asset, Object nonce);

  external void wire_XelisKeyPair_get_seed(
      NativePortType port_, Object that, int language_index);

  external void wire_create_key_pair(NativePortType port_, String? seed);

  external void wire_SendToDartLogger_set_stream_sink(NativePortType port_);

  external void wire_init_logger(NativePortType port_);

  external void wire_set_network_to_dev(NativePortType port_);

  external void wire_set_network_to_mainnet(NativePortType port_);

  external void wire_set_network_to_testnet(NativePortType port_);

  external void wire_XelisWallet_get_address_str(
      NativePortType port_, Object that);

  external void wire_XelisWallet_get_nonce(NativePortType port_, Object that);

  external void wire_XelisWallet_get_seed(
      NativePortType port_, Object that, int language_index);

  external void wire_XelisWallet_is_online(NativePortType port_, Object that);

  external void wire_XelisWallet_set_offline_mode(
      NativePortType port_, Object that);

  external void wire_XelisWallet_set_online_mode(
      NativePortType port_, Object that, String daemon_address);

  external void wire_create_xelis_wallet(
      NativePortType port_, String name, String password, String? seed);

  external void wire_open_xelis_wallet(
      NativePortType port_, String name, String password);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
          dynamic ptr);
}
