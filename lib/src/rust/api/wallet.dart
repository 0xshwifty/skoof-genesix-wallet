// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<XelisWallet> createXelisWallet(
        {required String name,
        required String password,
        String? seed,
        dynamic hint}) =>
    RustLib.instance.api.createXelisWallet(
        name: name, password: password, seed: seed, hint: hint);

Future<XelisWallet> openXelisWallet(
        {required String name, required String password, dynamic hint}) =>
    RustLib.instance.api
        .openXelisWallet(name: name, password: password, hint: hint);

// Rust type: flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisWallet>>
@sealed
class XelisWallet extends RustOpaque {
  XelisWallet.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  XelisWallet.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_XelisWallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_XelisWallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_XelisWalletPtr,
  );

  Future<String> getAddressStr({dynamic hint}) =>
      RustLib.instance.api.xelisWalletGetAddressStr(
        that: this,
      );

  Future<int> getNonce({dynamic hint}) =>
      RustLib.instance.api.xelisWalletGetNonce(
        that: this,
      );

  Future<String> getSeed({required int languageIndex, dynamic hint}) =>
      RustLib.instance.api.xelisWalletGetSeed(
        that: this,
        languageIndex: languageIndex,
      );

  Future<bool> isOnline({dynamic hint}) =>
      RustLib.instance.api.xelisWalletIsOnline(
        that: this,
      );

  Future<void> setOfflineMode({dynamic hint}) =>
      RustLib.instance.api.xelisWalletSetOfflineMode(
        that: this,
      );

  Future<void> setOnlineMode({required String daemonAddress, dynamic hint}) =>
      RustLib.instance.api.xelisWalletSetOnlineMode(
        that: this,
        daemonAddress: daemonAddress,
      );
}
