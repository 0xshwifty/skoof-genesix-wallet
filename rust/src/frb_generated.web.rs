// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// Section: imports

use super::*;
use crate::api::keypair::*;
use crate::api::wallet::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl<T> CstDecode<Option<T>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
where
    JsValue: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null() && !self.is_undefined()).then(|| self.cst_decode())
    }
}
impl CstDecode<anyhow::Error> for String {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<String> for String {
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<crate::api::logger::LogEntry>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::logger::LogEntry {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::logger::LogEntry {
            time_millis: self_.get(0).cst_decode(),
            level: self_.get(1).cst_decode(),
            tag: self_.get(2).cst_decode(),
            msg: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<Option<String>> for Option<String> {
    fn cst_decode(self) -> Option<String> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<anyhow::Error> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisKeyPair>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisKeyPair>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisWallet>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisWallet>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> usize {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[wasm_bindgen]
pub fn wire_create_log_stream(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_create_log_stream_impl(port_)
}

#[wasm_bindgen]
pub fn wire_set_up_rust_logger(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_set_up_rust_logger_impl(port_)
}

#[wasm_bindgen]
pub fn wire_start_tokio_runtime_for_rust(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_start_tokio_runtime_for_rust_impl(port_)
}

#[wasm_bindgen]
pub fn wire_XelisKeyPair_create_tx(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    address: String,
    amount: u64,
    asset: String,
    balance: u64,
    nonce: u64,
) {
    wire_XelisKeyPair_create_tx_impl(port_, that, address, amount, asset, balance, nonce)
}

#[wasm_bindgen]
pub fn wire_XelisKeyPair_get_address(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_XelisKeyPair_get_address_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_XelisKeyPair_get_estimated_fees(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    address: String,
    amount: u64,
    asset: String,
    nonce: u64,
) {
    wire_XelisKeyPair_get_estimated_fees_impl(port_, that, address, amount, asset, nonce)
}

#[wasm_bindgen]
pub fn wire_XelisKeyPair_get_seed(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    language_index: usize,
) {
    wire_XelisKeyPair_get_seed_impl(port_, that, language_index)
}

#[wasm_bindgen]
pub fn wire_create_key_pair(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seed: Option<String>,
) {
    wire_create_key_pair_impl(port_, seed)
}

#[wasm_bindgen]
pub fn wire_SendToDartLogger_set_stream_sink(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    wire_SendToDartLogger_set_stream_sink_impl(port_)
}

#[wasm_bindgen]
pub fn wire_init_logger(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_init_logger_impl(port_)
}

#[wasm_bindgen]
pub fn wire_set_network_to_dev(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_set_network_to_dev_impl(port_)
}

#[wasm_bindgen]
pub fn wire_set_network_to_mainnet(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_set_network_to_mainnet_impl(port_)
}

#[wasm_bindgen]
pub fn wire_set_network_to_testnet(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_set_network_to_testnet_impl(port_)
}

#[wasm_bindgen]
pub fn wire_XelisWallet_get_address_str(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_XelisWallet_get_address_str_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_XelisWallet_get_nonce(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_XelisWallet_get_nonce_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_XelisWallet_get_seed(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    language_index: usize,
) {
    wire_XelisWallet_get_seed_impl(port_, that, language_index)
}

#[wasm_bindgen]
pub fn wire_XelisWallet_is_online(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_XelisWallet_is_online_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_XelisWallet_set_offline_mode(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_XelisWallet_set_offline_mode_impl(port_, that)
}

#[wasm_bindgen]
pub fn wire_XelisWallet_set_online_mode(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
    daemon_address: String,
) {
    wire_XelisWallet_set_online_mode_impl(port_, that, daemon_address)
}

#[wasm_bindgen]
pub fn wire_create_xelis_wallet(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    name: String,
    password: String,
    seed: Option<String>,
) {
    wire_create_xelis_wallet_impl(port_, name, password, seed)
}

#[wasm_bindgen]
pub fn wire_open_xelis_wallet(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    name: String,
    password: String,
) {
    wire_open_xelis_wallet_impl(port_, name, password)
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<XelisKeyPair>,
        >(ptr);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<XelisKeyPair>,
        >(ptr);
    }
}

#[wasm_bindgen]
pub fn rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<XelisWallet>,
        >(ptr);
    }
}

#[wasm_bindgen]
pub fn rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<XelisWallet>,
        >(ptr);
    }
}
