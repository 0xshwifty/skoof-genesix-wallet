// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.12.

// Section: imports

use super::*;
use crate::api::keypair::*;
use crate::api::wallet::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<anyhow::Error> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisKeyPair>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisKeyPair>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisWallet>>>
    for *const std::ffi::c_void
{
    fn cst_decode(self) -> flutter_rust_bridge::RustOpaque<std::sync::RwLock<XelisWallet>> {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_rust_opaque(self) }
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<crate::api::logger::LogEntry> for wire_cst_log_entry {
    fn cst_decode(self) -> crate::api::logger::LogEntry {
        crate::api::logger::LogEntry {
            time_millis: self.time_millis.cst_decode(),
            level: self.level.cst_decode(),
            tag: self.tag.cst_decode(),
            msg: self.msg.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_log_entry {
    fn new_with_null_ptr() -> Self {
        Self {
            time_millis: Default::default(),
            level: core::ptr::null_mut(),
            tag: core::ptr::null_mut(),
            msg: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_entry {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_create_log_stream(port_: i64) {
    wire_create_log_stream_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_set_up_rust_logger(port_: i64) {
    wire_set_up_rust_logger_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_start_tokio_runtime_for_rust(port_: i64) {
    wire_start_tokio_runtime_for_rust_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisKeyPair_create_tx(
    port_: i64,
    that: *const std::ffi::c_void,
    address: *mut wire_cst_list_prim_u_8_strict,
    amount: u64,
    asset: *mut wire_cst_list_prim_u_8_strict,
    balance: u64,
    nonce: u64,
) {
    wire_XelisKeyPair_create_tx_impl(port_, that, address, amount, asset, balance, nonce)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisKeyPair_get_address(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_XelisKeyPair_get_address_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisKeyPair_get_estimated_fees(
    port_: i64,
    that: *const std::ffi::c_void,
    address: *mut wire_cst_list_prim_u_8_strict,
    amount: u64,
    asset: *mut wire_cst_list_prim_u_8_strict,
    nonce: u64,
) {
    wire_XelisKeyPair_get_estimated_fees_impl(port_, that, address, amount, asset, nonce)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisKeyPair_get_seed(
    port_: i64,
    that: *const std::ffi::c_void,
    language_index: usize,
) {
    wire_XelisKeyPair_get_seed_impl(port_, that, language_index)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_create_key_pair(
    port_: i64,
    seed: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_create_key_pair_impl(port_, seed)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_SendToDartLogger_set_stream_sink(port_: i64) {
    wire_SendToDartLogger_set_stream_sink_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_init_logger(port_: i64) {
    wire_init_logger_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_set_network_to_dev(port_: i64) {
    wire_set_network_to_dev_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_set_network_to_mainnet(port_: i64) {
    wire_set_network_to_mainnet_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_set_network_to_testnet(port_: i64) {
    wire_set_network_to_testnet_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisWallet_get_address_str(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_XelisWallet_get_address_str_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisWallet_get_nonce(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_XelisWallet_get_nonce_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisWallet_get_seed(
    port_: i64,
    that: *const std::ffi::c_void,
    language_index: usize,
) {
    wire_XelisWallet_get_seed_impl(port_, that, language_index)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisWallet_is_online(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_XelisWallet_is_online_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisWallet_set_offline_mode(
    port_: i64,
    that: *const std::ffi::c_void,
) {
    wire_XelisWallet_set_offline_mode_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_XelisWallet_set_online_mode(
    port_: i64,
    that: *const std::ffi::c_void,
    daemon_address: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_XelisWallet_set_online_mode_impl(port_, that, daemon_address)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_create_xelis_wallet(
    port_: i64,
    name: *mut wire_cst_list_prim_u_8_strict,
    password: *mut wire_cst_list_prim_u_8_strict,
    seed: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_create_xelis_wallet_impl(port_, name, password, seed)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_wire_open_xelis_wallet(
    port_: i64,
    name: *mut wire_cst_list_prim_u_8_strict,
    password: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_open_xelis_wallet_impl(port_, name, password)
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<XelisKeyPair>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisKeyPair(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<XelisKeyPair>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_rust_arc_increment_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_increment_strong_count::<
            std::sync::RwLock<XelisWallet>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_rust_arc_decrement_strong_count_RustOpaque_stdsyncRwLockXelisWallet(
    ptr: *const std::ffi::c_void,
) {
    unsafe {
        flutter_rust_bridge::for_generated::rust_arc_decrement_strong_count::<
            std::sync::RwLock<XelisWallet>,
        >(ptr);
    }
}

#[no_mangle]
pub extern "C" fn frbgen_xelis_mobile_wallet_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_entry {
    time_millis: i64,
    level: *mut wire_cst_list_prim_u_8_strict,
    tag: *mut wire_cst_list_prim_u_8_strict,
    msg: *mut wire_cst_list_prim_u_8_strict,
}
